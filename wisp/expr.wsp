INPUT.          READ AN EXPRESSION, AND PUT IT IN PREFIX FORM.
   START LIST T.  START THE OPERAND STACK.
   START LIST S, CAR S = '..  START THE OPERATOR STACK.
   START LIST I, Z = 'I.      START THE INPUT LIST.

SUBEXP.         CONVERT A SUBEXPRESSION AND STORE IT IN CAR T.
   TO READ AND BACK.  GET THE NEXT NONBLANK CHAR INTO CAR Z.
   TO LPAREN IF CAR Z = '(.  IS THIS OPERAND AN EXPRESSION, YES.
   TO ERROR IF CAR Y = CAR Z.  NO, IS THIS CHARACTER AN OPERATOR, YES.
   PUSH DOWN T, CAR T = CAR Z.  NO, PLACE IT ON STACK T.

OPERATOR.       PLACE AN OPERATOR ON STACK S.
   TO READ AND BACK.
   TO RPAREN IF CAR Z =').  IS THIS THE END OF A SUBEXPRESSION, YES.
   TO ERROR IF CAR Y NE CAR Z.  NO, IS THE CHARACTER AN OPERAND, YES.
   TO STACK IF CAR X = 'I.  IS THE TOP ELEMENT OF S STRONGER, NO.

FIXEXP, TO UNSTACK AND BACK.  YES, CREATE AN EXPRESSION.
   TO CHECKOP AND BACK.  CHECK THE STRENGTH OF THE NEXT ELEMENT OF S.
   TO FIXEXP IF CAR X = 'S.  IS IT STRONGER, YES.

STACK, TO BACK IF CAR Z = '..  HAVE WE COME TO THE END, YES.
   PUSH DOWN S, CAR S = CAR Z.  NO, STACK THE OPERATOR.
   TO SUBEXP.  GET THE NEXT OPERAND.

READ.           POINT Z TO THE NEXT NONBLANK CHARACTER.
   Z = CDR Z, CAR Z = INPUT.
   TO READ IF CAR Z = ' .

CHECKOP.        CHECK CAR Z AGAINST THE LIST OF OPERATIONS.
   CAR X = 'I, Y = '0.

SCAN1, Y = CDR Y.  SCAN THE OPERATOR LIST.
   TO BACK IF CAR Y = CAR Z.  IS CAR Z STRONGER THAN CAR S, YES.
   TO STACKOP IF CAR Y = CAR S. IS CAR S STRONGER THAN CAR Z, YES.
   TO SCAN1 IF CDR Y NE NIL, RETURN.

STACKOP, CAR X = 'S.  SET A SWITCH.
   TO BACK IF CDR Y = NIL.

SCAN2, Y = CDR Y.  TRY TO FIND CAR Z ON THE OPERATOR LIST.
   TO BACK IF CAR Y = CAR Z.
   TO SCAN2 IF CDR Y NE NIL.

BACK, RETURN.

LPAREN.  THE OPERAND IS A SUBEXPRESSION.
   PUSH DOWN S, CAR S = '(.  SET A MARKER IN THE OPERAND STACK.
   TO SUBEXP.

RPAREN.  COMPLETE THE SUBEXPRESSION.
   TO NOPAR IF CAR S NE '(.  HAVE WE USED ALL OF THE OPERATORS, NO.
   POP UP S, TO OPERATOR.  YES, GET RID OF THE MARKER.

NOPAR, TO ERROR IF CAR S = '..  WAS THERE A MATCHING LEFT PAREN, NO.
   TO UNSTACK AND BACK, TO RPAREN.

UNSTACK.  CREATE A SUBEXPRESSION.
   START LIST Y.
   CAR Y = CAR T, POP UP T.  SECOND OPERAND,
   PUSH DOWN Y, CAR Y = CAR T.  FIRST OPERAND,
   PUSH DOWN Y, CAR Y = CAR S.  OPERATOR.
   POP UP S, CAR T = Y.  PLACE THE COMPLETE EXPRESSION ON STACK T.
   RETURN.

ERROR, CAR S = 'E, RETURN.  SET THE ERROR FLAG AND GET OUT.
